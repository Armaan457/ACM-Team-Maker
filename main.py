import csv
import json
from collections import defaultdict
from Agents.crews import Idea_Crew, Team_Crew

INPUT_CSV_PATH = r'Data/Intra ACM Hackathon 2025 (Responses) - Form Responses 1.csv'
TEAMS_JSON_PATH = r'Outputs/Teams.json'
IDEAS_JSON_PATH = r'Outputs/Team_Idea.json'
FINAL_CSV_PATH = r'Data/final_team_ideas.csv'

print("--- Team Maker Crew Loading ---")
try:
    all_student_data = []
    with open(INPUT_CSV_PATH, mode='r', encoding='utf-8') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            all_student_data.append({
                "Name": row.get("Full name", "").strip(),
                "Skills": row.get("Technical skills", "").strip(),
                "Idea": row.get("Ideas that you would like to build on", "").strip()
            })
    print(f"Successfully loaded data for {len(all_student_data)} students.")
except FileNotFoundError:
    print(f"The input CSV file was not found at {INPUT_CSV_PATH}")
    exit()

team_making_input_data = [{"Name": s["Name"], "Skills": s["Skills"]} for s in all_student_data]
team_making_input_str = json.dumps(team_making_input_data, indent=2)

team_crew_output = Team_Crew.kickoff(inputs={"input_data": team_making_input_str})

print("--- Idea Choosing Crew Loading ---")

try:
    with open(TEAMS_JSON_PATH, 'r', encoding='utf-8') as f:
        teams_data = json.load(f)
except (FileNotFoundError, json.JSONDecodeError) as e:
    print(f"Could not read or parse the teams output file '{TEAMS_JSON_PATH}'. {e}")
    print("This file should have been generated by the team formation crew. Cannot proceed.")
    exit()

name_to_team = {}
for team_info in teams_data.get("Teams", []):
    team_number = team_info.get("Team_Number")
    member_names_str = team_info.get("Member_Names", "")
    if team_number is not None and member_names_str:
        for name in member_names_str.split(','):
            name_to_team[name.strip()] = team_number

team_ideas_map = defaultdict(list)
for student in all_student_data:
    name = student["Name"]
    idea = student["Idea"]
    if idea and name in name_to_team:
        team_number = name_to_team[name]
        team_ideas_map[team_number].append(idea)

idea_choosing_input_data = [
    {"Team_number": team_num, "Ideas": " , ".join(ideas)}
    for team_num, ideas in team_ideas_map.items() if ideas
]
idea_choosing_input_str = json.dumps(idea_choosing_input_data, indent=2)

idea_crew_output = Idea_Crew.kickoff(inputs={"team_data": idea_choosing_input_str})

print("--- Merging ---")

try:
    with open(IDEAS_JSON_PATH, 'r', encoding='utf-8') as f:
        ideas_data = json.load(f)
except (FileNotFoundError, json.JSONDecodeError) as e:
    print(f"Could not read or parse the ideas output file '{IDEAS_JSON_PATH}'. {e}")
    print("This file should have been generated by the idea selection crew. Cannot generate final report.")
    exit()

merged_data = defaultdict(lambda: {"Members": "N/A", "Idea": "N/A"})

for team_info in teams_data.get("Teams", []):
    team_number = team_info.get("Team_Number")
    if team_number is not None:
        merged_data[team_number]["Members"] = team_info.get("Member_Names", "N/A")

for idea_info in ideas_data.get("Team_Idea", []):
    team_number = idea_info.get("Team_Number")
    if team_number is not None:
        merged_data[team_number]["Idea"] = idea_info.get("Best_Idea", "N/A")

output_rows = []
for team_number in sorted(merged_data.keys()):
    team_details = merged_data[team_number]
    output_rows.append({
        "Team ID": f"{team_number}",
        "Members": team_details["Members"],
        "Best Idea": team_details["Idea"].replace('\n', ' ').strip()
    })

if not output_rows:
    print("Warning: No data was merged. The output file will be empty.")
else:
    with open(FINAL_CSV_PATH, 'w', newline='', encoding='utf-8') as outfile:
        fieldnames = ["Team ID", "Members", "Best Idea"]
        writer = csv.DictWriter(outfile, fieldnames=fieldnames)
        writer.writeheader()
        writer.writerows(output_rows)
    print(f"\nðŸŽ‰ SUCCESS: Process complete!")
    print(f"Final merged report for {len(output_rows)} teams saved to: {FINAL_CSV_PATH}")